from collections import namedtuple
import sys

"""
    namedtuple to store the book values that we read from the benchmark.
    @param id: id of the book
    @param value: number representing the value generated by reading the book
    @param id_library: number of the library in wich belongs
"""
Book = namedtuple('Book', ['id', 'value', 'id_library'])
"""
    namedtuple to store the library values that we read from the benchmark.
    @param id: id of the library
    @param time: array with the time that costs tranporting books from the
                 library to all others
"""
Library = namedtuple('Library', ['id', 'time'])
"""
    namedtuple to store the reader values that we read from the benchmark.
    @param id: id of the reader
    @param id_library: id of the library the reader is suscribed
    @param books: array of tuples containing [(id_book, time_spent_reading)]
"""
Reader = namedtuple('Reader', ['id', 'id_library', 'books'])

class Checker:
    def __init__(self, num_of_libraries, bookdata, readerdata, time):
        self.num_of_libraries = num_of_libraries
        self.bookdata = bookdata
        self.readerdata = readerdata
        self.time = time

    """
    Checks if the values of a book are correct
    @param book: Book namedtuple
    """
    def checkBook(self, book):
        return (book.id >= 0 and book.id < self.bookdata.num) and (book.value >= 1 and book.value <= self.bookdata.max_value) and (book.id_library >= 0 and book.id_library < self.num_of_libraries) 

    """
    Checks if the values of a Library are correct
    @param library: Library namedtuple
    """
    def checkLibrary(self, library):
        if not((library.id >= 0 and library.id < self.num_of_libraries) and len(library.time) > 0):
            return False
        for i in library.time:
            if not(i >= 0 and i <= self.time+1):
                return False 
        return True
    
    """
    Checks if the values of a reader are correct
    @param reader: Reader namedtuple
    """
    def checkReader(self, reader):
        if not((reader.id >= 0 and reader.id < self.readerdata.num) and (reader.id_library >= 0 and reader.id_library < self.num_of_libraries) and (len(reader.books) >= 1 and len(reader.books) <= self.readerdata.max_books)):
            return False
        books_set = set()
        for i in reader.books:
            if not((i[0] >= 0 and i[0] < self.bookdata.num) and i[0] not in books_set  and (i[1] >= 1 and i[1] <= self.time+1)):
                return False
            books_set.add(i)
        return True

"""
Creates a book from a line of the benchmark
@param line: string with a line of the benchmark file
"""
def createBook(line):
    values = line.split()
    return Book(int(values[1]), int(values[2]), int(values[3]))

"""
Create a library from a line of the benchmark
@param line: string with a line of the benchmark file
"""
def createLibrary(line):
    values = line.split()
    return Library(int(values[1]), [int(i) for i in values[2:]])

"""
Create a reader from a line of the benchmark
@param line: string with a line of the benchmark file
"""
def createReader(line):
    values = line.split()
    books_time = values[3:]
    books = []
    i = 0
    for i,value in enumerate(books_time):
        if i%2 == 0 and value != '\n':
            books.append((int(books_time[i]), int(books_time[i+1])))
    return Reader(int(values[1]), int(values[2]), books)

"""
Checks if the benchmark is correct
    @param checker: instance of a cheker object
    @param filename: path to the benchmark file
"""
def checkValues(checker, filename):
    input_file = open(filename, "r")
    for line in input_file:
        print(str(line))
        if line[0] == "B":
            book = createBook(line)
            if not(checker.checkBook(book)):
                print("Error in Book: "+str(book.id))
                exit(-1)
        if line[0] == "L":
            library = createLibrary(line)
            if not(checker.checkLibrary(library)):
                print("Error in Library: "+str(library.id))
                exit(-1)
        if line[0] == "R":
            reader = createReader(line)
            if not(checker.checkReader(reader)):
                print("Error in Reader: "+str(reader.id))
                exit(-1)
    print("All good baby")